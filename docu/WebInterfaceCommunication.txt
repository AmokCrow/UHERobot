
UHERobot specification for communication between the web interface and the daemon, comprising further of the communication between the server and the client, and the server-side script and the daemon.

1. Server-Client

1.1 Messaging method
The server and the client will exchenge information by AJAX calls made by the client. The call will be made to a server-side resource named cgi-bin/uheint.py . 

Communication will be made whenever the user issues a command, or every 200ms. If the user has not issued any commands, either a heartbeat or a halt command will be sent. If the last user input was to effect movement, a heartbeat will be sent. If the last command was to halt movement, this will be resent instead. If no communication has happened in 2 seconds, a timeout occurs and both the server and client shall react accordingly.

1.2 Message contents
The client-to-server message carries a command payload in JSON format. Each JSON packet may have one or more of the following fields and values:

movement : forward | reverse | right | left | straight | halt | faster | slower
camera : up | down | left | right
heartbeat : 

The AJAX calls may return either empty, or with a JSON payload with one or more of the following fields and values:

statuslog : <a text string> (to be appended to the on-screen scrolling status field)
battery : <a text string> (the current state of the robot battery)
movementstatus : <text string> (signifies the current effected movement of the robot)
 

2. Server script and daemon

2.1 Messaging method
The server and daemon communicate via nnamed pipes. The daemon will listens constantly for communications from a pape named cgi2daemon, that is located in the main folder of the daemon process. The daemon will also output status to a pipe named daemon2cgi, located in the same folder. The messages are text-based, using ASCII encoding. One full communication shall be begun by opening a pipe for reading or writing by the cgi script, and ends by the closing of the pipe by the writer.

2.2 Message contents
The messages shall consist of fields bordered by angle brackets, with the header and content separated by a colon, like so: "<...:...>"

The valid headers and values are the same as those used for the server-client communication.



